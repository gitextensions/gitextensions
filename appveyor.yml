version: 3.5.3.{build}

branches:
  except:
    - configdata
    - gh-pages
    - /experimental\/*/

matrix:
  fast_finish: true

# https://www.appveyor.com/docs/build-environment/#build-worker-images
image: Visual Studio 2019

init:
  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

cache:
  # preserve "GitExtensions.PluginManager" directory, will be reset if appveyor.yml is modified
  - .\artifacts\publish\GitExtensions.PluginManager -> appveyor.yml

# Build settings, not to be confused with "before_build" and "after_build".
# "project" is relative to the original build directory and not influenced by directory changes in "before_build".
build:
  # enable MSBuild parallel builds
  parallel: true
  # MSBuild verbosity level
  verbosity: minimal

install:
- cmd: git submodule update --init --recursive
- cmd: echo /logger:"%ProgramFiles%\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll">> Directory.Build.rsp
- cmd: |-
    cd scripts
    C:\\Python35\\python set_version_to.py -v %APPVEYOR_BUILD_VERSION% -t %APPVEYOR_BUILD_VERSION%
    cd ..


# to run your custom scripts instead of automatic MSBuild
build_script:
- ps: |
    # for release branches mark the repo as clean
    if (!$env:APPVEYOR_PULL_REQUEST_TITLE -and ($env:APPVEYOR_REPO_BRANCH.StartsWith("release/") -or $env:APPVEYOR_REPO_TAG)) {
      & .\scripts\Mark-RepoClean.ps1
    }
- ps: |
    # if building a temporary merge with master, soft reset to the PR commit so the build contains the PR's hash instead of the merge-commit's hash
    if ($env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT -and ($env:APPVEYOR_REPO_COMMIT -ne $env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT))
    {
      git reset --soft "$env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT" --
    }
- ps: |
    # build
    & .\cibuild.cmd -restore -build -buildNative -logFileName build.binlog
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

    # if we have reset above we need to reset English xlfs, otherwise the loc verification step will fail
    # refer to https://github.com/gitextensions/gitextensions/issues/7979
    if ($env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT) {
      git reset $env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT --quiet -- "GitUI/Translation/English.xlf" "GitUI/Translation/English.Plugins.xlf"
      git checkout                                     --force -- "GitUI/Translation/English.xlf" "GitUI/Translation/English.Plugins.xlf"
    }

    # it would be nice to run '.\cibuild.cmd -loc -logFileName localise.binlog /p:NoBuild=true' but it doesn't work without `-build` switch :\
    Push-Location .\GitExtensions
    msbuild /p:Configuration=Release /t:_UpdateEnglishTranslations /p:RunTranslationApp=true /p:ContinuousIntegrationBuild=true /v:m /bl:..\artifacts\log\localise.binlog
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
    Pop-Location


# to run your custom scripts instead of automatic tests
test_script:
- ps: |
    & .\cibuild.cmd /p:NoBuild=true -test -logFileName UnitTest.binlog
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
    & .\cibuild.cmd /p:NoBuild=true -integrationTest -logFileName IntegrationTest.binlog
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }


# scripts to run after tests
after_test:
- ps: |
    Write-Host "Preparing build artifacts..."
    & .\cibuild.cmd -publish -logFileName publish.binlog
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

    # get files
    $msi = (Resolve-Path .\artifacts\publish\GitExtensions-*.msi)[0].Path;
    $zip = (Resolve-Path .\artifacts\publish\GitExtensions-Portable-*.zip)[0].Path;

    # do not sign artifacts for non-release branches
    if ($env:APPVEYOR_PULL_REQUEST_TITLE) {
        Write-Host "[INFO]: Do not sign non-release branches"
        Get-ChildItem $zip | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }

        if ($env:ARTIFACT_PUBLISH_PULL_REQUEST_MSI) {
            Get-ChildItem $msi | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }
        }

        Exit-AppVeyorBuild
        return
    }

    # archive files so we send them all in one go
    $version = "$env:APPVEYOR_BUILD_VERSION";
    $combined = ".\combined.$version-unsigned.zip"
    Compress-Archive -LiteralPath $msi, $zip -CompressionLevel NoCompression -DestinationPath $combined -Force
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }


artifacts:
  - path: 'combined.*-unsigned.zip'


deploy:
- provider: Webhook
  on:
    ARTIFACT_SIGNING_ENABLED: true
  url: https://app.signpath.io/API/v1/7c19b2cf-90f7-4d15-9b12-1b615f7c18c4/Integrations/AppVeyor?ProjectKey=GitExtensions_combined&SigningPolicyKey=release-2020
  on_build_success: true
  on_build_failure: false
  on_build_status_changed: false
  method: POST
  authorization:
     secure: IlLI/MbhdzmXF/WB2G84zYsDWePXJqHBWDb1zBPxxXvGgx0WRxzMZxuBsvCOcZvbPTRF+UcGp0d5/HT8xZUEjA==
