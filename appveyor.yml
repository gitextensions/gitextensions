version: 4.0.0.{build}

branches:
  except:
    - configdata
    - gh-pages
    - /experimental\/*/

matrix:
  fast_finish: true

# https://www.appveyor.com/docs/build-environment/#build-worker-images
image: Visual Studio 2022

environment:
  # Disable the .NET logo in the console output.
  DOTNET_NOLOGO: true
  # Disable the .NET first time experience to skip caching NuGet packages and speed up the build.
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Use latest version of current used .NET version.  6.0 could use the latest of 6.0.  See .\Scripts\Update-DotnetVersion.ps1
  GE_USE_LATEST_DOTNET: true

init:
  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

cache:
  # preserve "GitExtensions.PluginManager" directory, will be reset if appveyor.yml is modified
  - .\artifacts\publish\GitExtensions.PluginManager -> appveyor.yml

# Build settings, not to be confused with "before_build" and "after_build".
# "project" is relative to the original build directory and not influenced by directory changes in "before_build".
build:
  # enable MSBuild parallel builds
  parallel: true
  # MSBuild verbosity level
  verbosity: minimal

install:
- ps: |
      if($env:GE_USE_LATEST_DOTNET -eq $true)
      {
        .\scripts\Update-DotnetVersion.ps1
      }
- ps: |
      Invoke-WebRequest "https://dot.net/v1/dotnet-install.ps1" -OutFile "./dotnet-install.ps1"
      ./dotnet-install.ps1 -JsonFile global.json -InstallDir 'C:\Program Files\dotnet'
- cmd: git submodule update --init --recursive
- cmd: |-
    cd scripts
    C:\\Python35\\python set_version_to.py -v %APPVEYOR_BUILD_VERSION% -t %APPVEYOR_BUILD_VERSION%
    cd ..


# to run your custom scripts instead of automatic MSBuild
build_script:
- ps: |
    # for release branches mark the repo as clean
    if (!$env:APPVEYOR_PULL_REQUEST_TITLE -and ($env:APPVEYOR_REPO_BRANCH.StartsWith("release/") -or $env:APPVEYOR_REPO_TAG)) {
      & .\scripts\Mark-RepoClean.ps1
    }
- ps: |
    $isBuildingPR = $false;
    # if building a temporary merge with master, soft reset to the PR commit so the build contains the PR's hash instead of the merge-commit's hash
    if ($env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT -and ($env:APPVEYOR_REPO_COMMIT -ne $env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT))
    {
        git reset --soft "$env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT" --
        $isBuildingPR = $true;
    }
- ps: |
    # build VC++
    dotnet build .\scripts\native.proj -c Release --verbosity q --nologo /bl:.\artifacts\log\native.binlog
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
- ps: |
    # build .NET
    dotnet build -c Release --verbosity q --nologo /bl:.\artifacts\log\build.binlog /p:ContinuousIntegrationBuild=true
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
- ps: |
    # if we have reset above, we need to restore the merge commit, otherwise the loc verification step will fail
    # there is no need to have the same commit hash, but there must be no pending changes before the loc verification
    # refer to https://github.com/gitextensions/gitextensions/issues/7979
    if ($isBuildingPR) {
        git config user.email "gitextensions@github.com"
        git config user.name "Git Extensions"
        git -c core.autocrlf=false commit -a -m "restore merge commit" | Out-Null
        # ignore warning about line-endings conversion
        $global:LASTEXITCODE = 0
    }
- ps: |
    # Verify that new strings (if any) have been processed and ready for localisation
    # it would be nice to run '.\cibuild.cmd -loc -logFileName localise.binlog /p:NoBuild=true' but it doesn't work without `-build` switch :\
    Push-Location .\GitExtensions
    dotnet msbuild /p:Configuration=Release /t:_UpdateEnglishTranslations /p:RunTranslationApp=true /p:ContinuousIntegrationBuild=true /v:m /bl:..\artifacts\log\localise.binlog
    Pop-Location
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

# to run your custom scripts instead of automatic tests
test_script:
- ps: |
    dotnet test -c Release --no-restore --nologo --verbosity q --test-adapter-path:. --logger:Appveyor --logger:trx /bl:.\artifacts\log\tests.binlog
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

# scripts to run after tests
after_test:
- ps: |
    Write-Host "Preparing build artifacts..."
    dotnet publish -c Release --no-build /bl:.\artifacts\log\publish.binlog /p:ContinuousIntegrationBuild=true
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
- ps: |
    # get files
    $msi = (Resolve-Path .\artifacts\Release\publish\GitExtensions-*.msi)[0].Path;
    $zip = (Resolve-Path .\artifacts\Release\publish\GitExtensions-Portable-*.zip)[0].Path;

    # do not sign artifacts for non-release branches
    if ($env:APPVEYOR_PULL_REQUEST_TITLE) {
        Write-Host "[INFO]: Do not sign non-release branches"
        Get-ChildItem $zip | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }

        if ($env:ARTIFACT_PUBLISH_PULL_REQUEST_MSI) {
            Get-ChildItem $msi | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }
        }

        Exit-AppVeyorBuild
        return
    }

    # archive files so we send them all in one go
    $version = "$env:APPVEYOR_BUILD_VERSION";
    $combined = ".\combined.$version-unsigned.zip"
    Compress-Archive -LiteralPath $msi, $zip -CompressionLevel NoCompression -DestinationPath $combined -Force
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }


artifacts:
  - path: 'combined.*-unsigned.zip'


deploy:
- provider: Webhook
  on:
    ARTIFACT_SIGNING_ENABLED: true
  url: https://app.signpath.io/API/v1/7c19b2cf-90f7-4d15-9b12-1b615f7c18c4/Integrations/AppVeyor?ProjectKey=GitExtensions_combined&SigningPolicyKey=release-2020
  on_build_success: true
  on_build_failure: false
  on_build_status_changed: false
  method: POST
  authorization:
     secure: IlLI/MbhdzmXF/WB2G84zYsDWePXJqHBWDb1zBPxxXvGgx0WRxzMZxuBsvCOcZvbPTRF+UcGp0d5/HT8xZUEjA==


#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))


# on build failure
on_failure:
- ps: |
    Get-ChildItem -recurse artifacts\log\*.binlog -ErrorAction SilentlyContinue `
    | ForEach-Object {
        Push-AppveyorArtifact "$_"
    }
- ps: |
    Get-ChildItem -recurse English*.xlf -ErrorAction SilentlyContinue `
    | ForEach-Object {
        Push-AppveyorArtifact "$_"
    }
- ps: |
    Get-ChildItem -recurse artifacts\Release\TestsResults\*.trx | `
        ForEach-Object {
            $file = $_.FullName.Replace('[', '``[').Replace(']', '``]')
            #Write-Output "Processing $file"

            [xml]$xml = Get-Content -Path $file
            $xml.TestRun.Results.UnitTestResult | Where-Object outcome -eq 'Failed' | ForEach-Object {
                $errorMessage = "$($_.Output.ErrorInfo.Message)`r`n$($_.Output.ErrorInfo.StackTrace)`r`n"
                Write-Host $errorMessage -ForegroundColor Red
            }
        }
