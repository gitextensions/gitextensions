version: 4.0.0.{build}

branches:
  except:
    - configdata
    - gh-pages
    - /experimental\/*/

matrix:
  fast_finish: true

# https://www.appveyor.com/docs/build-environment/#build-worker-images
image: Visual Studio 2019

init:
  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

# Build settings, not to be confused with "before_build" and "after_build".
# "project" is relative to the original build directory and not influenced by directory changes in "before_build".
build:
  # enable MSBuild parallel builds
  parallel: true
  # MSBuild verbosity level
  verbosity: minimal

install:
- cmd: git submodule update --init --recursive
- cmd: echo %APPVEYOR_REPO_COMMIT%
- cmd: echo %APPVEYOR_PULL_REQUEST_HEAD_COMMIT%
  # if building a temporary merge with master, reset the git revision to the HEAD of the PR, keeping the files of the merge of course
- cmd: if not "%APPVEYOR_PULL_REQUEST_HEAD_COMMIT%" == "" if not "%APPVEYOR_PULL_REQUEST_HEAD_COMMIT%" == "%APPVEYOR_REPO_COMMIT%" git reset --soft "%APPVEYOR_PULL_REQUEST_HEAD_COMMIT%" --
- cmd: echo /logger:"%ProgramFiles%\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll">> Directory.Build.rsp
- cmd: |-
    cd scripts
    C:\\Python35\\python set_version_to.py -v %APPVEYOR_BUILD_VERSION% -t %APPVEYOR_BUILD_VERSION%
    cd ..


# to run your custom scripts instead of automatic MSBuild
build_script:
- ps: |
    # for release branches mark the repo as clean
    if (!$env:APPVEYOR_PULL_REQUEST_TITLE -and $env:APPVEYOR_REPO_BRANCH.StartsWith("release/")) {
      & .\scripts\Mark-RepoClean.ps1
    }

    # build
    & .\cibuild.cmd -restore -build -buildNative -loc
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }


# to run your custom scripts instead of automatic tests
test_script:
- ps: |
    & .\cibuild.cmd -test
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode);  }
    & .\cibuild.cmd -integrationTest
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }


# scripts to run after tests
after_test:
- ps: |
    Write-Host "Preparing build artifacts..."
    & .\cibuild.cmd -publish
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }


artifacts:
  - path: artifacts\log\**\*.binlog
  - path: artifacts\publish\*.zip

#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

# on build failure
on_failure:
- ps: |
    Get-ChildItem -recurse artifacts\tests\TestResult.xml -ErrorAction SilentlyContinue `
    | ForEach-Object {
        $resultFilePath = "$_"
        Get-Content $resultFilePath `
        | Select-String -Pattern '<test-run id="[^"]*"\s+testcasecount="(\d+)"\s+result="([^"]*)"\s+total="(\d+)"\s+passed="(\d+)"\s+failed="(\d+)".*' `
        | foreach {
            $result = $_.Matches.Groups

            $total  = $result[1].Value
            $passed = $result[4].Value
            $failed = $result[5].Value
            $notPassed = $total - $passed
            $testErrors = $failed
            $testProjectName = $resultFilePath.Split('\\')[-3]

            if ($testErrors -ne 0) {
              $logFile = Get-ChildItem -recurse artifacts\$testProjectName*.log
              Push-AppveyorArtifact $logFile
            }
        }
    }
