version: 3.6.0.{build}

branches:
  except:
    - configdata
    - gh-pages
    - /experimental\/*/

matrix:
  fast_finish: true

# https://www.appveyor.com/docs/build-environment/#build-worker-images
image: Visual Studio 2019

init:
  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

cache:
  # preserve "GitExtensions.PluginManager" directory, will be reset if appveyor.yml is modified
  - .\artifacts\publish\GitExtensions.PluginManager -> appveyor.yml

# Build settings, not to be confused with "before_build" and "after_build".
# "project" is relative to the original build directory and not influenced by directory changes in "before_build".
build:
  # enable MSBuild parallel builds
  parallel: true
  # MSBuild verbosity level
  verbosity: minimal

install:
- cmd: git submodule update --init --recursive
- cmd: |-
    cd scripts
    C:\\Python35\\python set_version_to.py -v %APPVEYOR_BUILD_VERSION% -t %APPVEYOR_BUILD_VERSION%
    cd ..


# to run your custom scripts instead of automatic MSBuild
build_script:
- ps: |
    $isBuildingPR = $false;
    # if building a temporary merge with master, soft reset to the PR commit so the build contains the PR's hash instead of the merge-commit's hash
    if ($env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT -and ($env:APPVEYOR_REPO_COMMIT -ne $env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT))
    {
        git reset --soft "$env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT" --
        $isBuildingPR = $true;
    }
- ps: |
    # build VC++
    dotnet build .\scripts\native.proj -c Release --verbosity q --nologo /bl:.\artifacts\log\native.binlog
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
- ps: |
    # build .NET
    dotnet build -c Release --verbosity q --nologo /bl:.\artifacts\log\build.binlog /p:ContinuousIntegrationBuild=true
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
- ps: |
    # if we have reset above, we need to restore the merge commit, otherwise the loc verification step will fail
    # there is no need to have the same commit hash, but there must be no pending changes before the loc verification
    # refer to https://github.com/gitextensions/gitextensions/issues/7979
    if ($isBuildingPR) {
        git config user.email "gitextensions@github.com"
        git config user.name "Git Extensions"
        git commit -a -m "restore merge commit"
        # ignore warning about line-endings conversion
        $global:LASTEXITCODE = 0
    }
- ps: |
    # Verify that new strings (if any) have been processed and ready for localisation
    # it would be nice to run '.\cibuild.cmd -loc -logFileName localise.binlog /p:NoBuild=true' but it doesn't work without `-build` switch :\
    Push-Location .\GitExtensions
    dotnet msbuild /p:Configuration=Release /t:_UpdateEnglishTranslations /p:RunTranslationApp=true /p:ContinuousIntegrationBuild=true /v:m /bl:..\artifacts\log\localise.binlog
    Pop-Location
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

# to run your custom scripts instead of automatic tests
test_script:
- ps: |
    dotnet test -c Release --no-restore --nologo --verbosity q --test-adapter-path:. --logger:Appveyor --logger:trx /bl:.\artifacts\log\tests.binlog
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

# scripts to run after tests
after_test:
- ps: |
    Write-Host "Preparing build artifacts..."
    dotnet publish -c Release --no-build /bl:.\artifacts\log\publish.binlog
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }


artifacts:
  - path: artifacts\Release\publish\*.zip

#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))


# on build failure
on_failure:
- ps: |
    Get-ChildItem -recurse artifacts\log\*.binlog -ErrorAction SilentlyContinue `
    | ForEach-Object {
        Push-AppveyorArtifact "$_"
    }
- ps: |
    Get-ChildItem -recurse English*.xlf -ErrorAction SilentlyContinue `
    | ForEach-Object {
        Push-AppveyorArtifact "$_"
    }
- ps: |
    Get-ChildItem -recurse artifacts\Release\TestsResults\*.trx | `
        ForEach-Object {
            $file = $_.FullName.Replace('[', '``[').Replace(']', '``]')
            #Write-Output "Processing $file"

            [xml]$xml = Get-Content -Path $file
            $xml.TestRun.Results.UnitTestResult | Where-Object outcome -eq 'Failed' | ForEach-Object {
                $errorMessage = "$($_.Output.ErrorInfo.Message)`r`n$($_.Output.ErrorInfo.StackTrace)`r`n"
                Write-Host $errorMessage -ForegroundColor Red
            }
        }
