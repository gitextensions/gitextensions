<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description" xml:space="preserve">
    <value>不要なブランチを削除</value>
  </data>
  <data name="DaysOlderThan" xml:space="preserve">
    <value>(days)日以上前の不要なブランチを削除</value>
  </data>
  <data name="DeleteRemoteBranchesFromFlag" xml:space="preserve">
    <value>リモートから不要なブランチを削除</value>
  </data>
  <data name="IncludeUnmergedBranchesFlag" xml:space="preserve">
    <value>未マージのブランチを削除</value>
  </data>
  <data name="MergedInBranch" xml:space="preserve">
    <value>すべてのブランチがマージされるべきブランチ</value>
  </data>
  <data name="RegexCaseInsensitiveFlag" xml:space="preserve">
    <value>正規表現フィルタの大文字小文字は区別されていませんか？</value>
  </data>
  <data name="RegexFilter" xml:space="preserve">
    <value>正規表現で削除するブランチをフィルタ</value>
  </data>
  <data name="RegexInvertedFlag" xml:space="preserve">
    <value>正規表現に統一していないブランチを検索</value>
  </data>
  <data name="RemoteName" xml:space="preserve">
    <value>不要なブランチを削除するリモート名</value>
  </data>
  <data name="UseRegexToFilterBranchesFlag" xml:space="preserve">
    <value>正規表現を利用して削除するブランチをフィルタ</value>
  </data>
  <data name="FormText" xml:space="preserve">
    <value>不要なブランチを削除</value>
  </data>
  <data name="Author" xml:space="preserve">
    <value>最後の作者</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>閉じる</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>削除</value>
  </data>
  <data name="IncludeRemoteBranches" xml:space="preserve">
    <value>対象のリモートブランチを削除</value>
  </data>
  <data name="Message" xml:space="preserve">
    <value>最後のメッセージ</value>
  </data>
  <data name="RefreshBtn" xml:space="preserve">
    <value>ブランチを検索</value>
  </data>
  <data name="AreYouSureToDelete" xml:space="preserve">
    <value>選択した{0}のブランチを削除してもよろしいですか？</value>
  </data>
  <data name="BranchesSelected" xml:space="preserve">
    <value>{0}/{1} ブランチ選択済み</value>
  </data>
  <data name="CancelText" xml:space="preserve">
    <value>キャンセル</value>
  </data>
  <data name="ChooseBranchesToDeleteText" xml:space="preserve">
    <value>削除するブランチを選択してください。完全に'{0}'にマージされているブランチのみ削除されます。</value>
  </data>
  <data name="DangerousActionText" xml:space="preserve">
    <value>危険な行為です！
リモート '{0}' のブランチを削除しようとしています。
これはやり直せませんが、本当に続行しますか？</value>
  </data>
  <data name="DeleteCaption" xml:space="preserve">
    <value>削除</value>
  </data>
  <data name="DeletingBranchesText" xml:space="preserve">
    <value>ブランチを削除中...</value>
  </data>
  <data name="DeletingUnmergedBranchesText" xml:space="preserve">
    <value>マージされていないブランチの削除は結果的にdangling コミットになります。注意してください。</value>
  </data>
  <data name="LoadingText" xml:space="preserve">
    <value>読込中...</value>
  </data>
  <data name="PressToSearchText" xml:space="preserve">
    <value>'{0}' で削除したいブランチを検索</value>
  </data>
  <data name="SearchBranchesText" xml:space="preserve">
    <value>ブランチを検索</value>
  </data>
  <data name="SelectBranchesToDeleteText" xml:space="preserve">
    <value>'{0}' 列のチェックボックスで削除するブランチを選択</value>
  </data>
  <data name="ButtonSettingsText" xml:space="preserve">
    <value>設定</value>
  </data>
  <data name="DateDataGridViewTextBoxColumn" xml:space="preserve">
    <value>最新のアクティビティ</value>
  </data>
  <data name="IncludeUnmergedBranchesText" xml:space="preserve">
    <value>未マージのブランチを含む</value>
  </data>
  <data name="Label1Text" xml:space="preserve">
    <value>x日以上前のブランチを削除</value>
  </data>
  <data name="Label2Text" xml:space="preserve">
    <value>完全に他のブランチにマージされたブランチを削除</value>
  </data>
  <data name="NameDataGridViewTextBoxColumn" xml:space="preserve">
    <value>名前</value>
  </data>
  <data name="RegexDoesNotMatch" xml:space="preserve">
    <value>マッチしません</value>
  </data>
  <data name="RegexFilter" xml:space="preserve">
    <value>/(feature|develop)/</value>
  </data>
  <data name="UseRegexCaseInsensitive" xml:space="preserve">
    <value>大文字小文字を区別しない</value>
  </data>
  <data name="UseRegexFilter" xml:space="preserve">
    <value>ブランチのフィルタに正規表現を使用</value>
  </data>
</root>