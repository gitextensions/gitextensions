<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description" xml:space="preserve">
    <value>删除废弃的分支</value>
  </data>
  <data name="DaysOlderThan" xml:space="preserve">
    <value>删除未变更超过多少（天）的过时分支</value>
  </data>
  <data name="DeleteRemoteBranchesFromFlag" xml:space="preserve">
    <value>删除过时分支的时一并删除远程分支</value>
  </data>
  <data name="IncludeUnmergedBranchesFlag" xml:space="preserve">
    <value>删除未合并的分支</value>
  </data>
  <data name="MergedInBranch" xml:space="preserve">
    <value>所有分支将要合入的分支</value>
  </data>
  <data name="RegexCaseInsensitiveFlag" xml:space="preserve">
    <value>正则表达式过滤器是否大小写不敏感？</value>
  </data>
  <data name="RegexFilter" xml:space="preserve">
    <value>用于过滤要删除的分支的正则表达式</value>
  </data>
  <data name="RegexInvertedFlag" xml:space="preserve">
    <value>搜索与正则表达式不匹配的分支</value>
  </data>
  <data name="RemoteName" xml:space="preserve">
    <value>删除过时的远程分支的名字</value>
  </data>
  <data name="UseRegexToFilterBranchesFlag" xml:space="preserve">
    <value>使用正则表达式筛选分支以删除</value>
  </data>
  <data name="FormText" xml:space="preserve">
    <value>删除废弃的分支</value>
  </data>
  <data name="Author" xml:space="preserve">
    <value>最后的作者</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>关闭</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>删除</value>
  </data>
  <data name="IncludeRemoteBranches" xml:space="preserve">
    <value>删除远程分支</value>
  </data>
  <data name="Message" xml:space="preserve">
    <value>最后的消息</value>
  </data>
  <data name="RefreshBtn" xml:space="preserve">
    <value>搜索分支</value>
  </data>
  <data name="AreYouSureToDelete" xml:space="preserve">
    <value>您确定要删除选中的{0}分支吗？</value>
  </data>
  <data name="BranchesSelected" xml:space="preserve">
    <value>{0}/{1} 分支被选中.</value>
  </data>
  <data name="CancelText" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="ChooseBranchesToDeleteText" xml:space="preserve">
    <value>选择要删除的分支。只有在 '{0}' 中完全合并的分支才会被删除。</value>
  </data>
  <data name="DangerousActionText" xml:space="preserve">
    <value>危险的行为! 
将在远程存储库上删除分支 '{0}' 。这是不能撤消的。 
确实要继续吗？</value>
  </data>
  <data name="DeleteCaption" xml:space="preserve">
    <value>删除</value>
  </data>
  <data name="DeletingBranchesText" xml:space="preserve">
    <value>删除分支</value>
  </data>
  <data name="DeletingUnmergedBranchesText" xml:space="preserve">
    <value>删除未合并的分支将导致悬空提交。小心使用!</value>
  </data>
  <data name="LoadingText" xml:space="preserve">
    <value>载入...</value>
  </data>
  <data name="PressToSearchText" xml:space="preserve">
    <value>按 '{0}' 搜索要删除的分支。</value>
  </data>
  <data name="SearchBranchesText" xml:space="preserve">
    <value>搜索分支</value>
  </data>
  <data name="SelectBranchesToDeleteText" xml:space="preserve">
    <value>使用 '{0}' 列中的复选框选择要删除的分支。</value>
  </data>
  <data name="ButtonSettingsText" xml:space="preserve">
    <value>设置</value>
  </data>
  <data name="DateDataGridViewTextBoxColumn" xml:space="preserve">
    <value>上次的活动</value>
  </data>
  <data name="IncludeUnmergedBranchesText" xml:space="preserve">
    <value>包含未合并的分支</value>
  </data>
  <data name="Label1Text" xml:space="preserve">
    <value>删除x天前的分支</value>
  </data>
  <data name="Label2Text" xml:space="preserve">
    <value>删除全部分支合并到分支</value>
  </data>
  <data name="NameDataGridViewTextBoxColumn" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="RegexDoesNotMatch" xml:space="preserve">
    <value>不匹配</value>
  </data>
  <data name="RegexFilter" xml:space="preserve">
    <value>/(特性|开发)/</value>
  </data>
  <data name="UseRegexCaseInsensitive" xml:space="preserve">
    <value>不区分大小写</value>
  </data>
  <data name="UseRegexFilter" xml:space="preserve">
    <value>使用正则表达式过滤分支</value>
  </data>
</root>