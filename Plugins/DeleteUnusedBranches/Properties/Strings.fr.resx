<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description" xml:space="preserve">
    <value>Supprimer les branches obsolètes</value>
  </data>
  <data name="DaysOlderThan" xml:space="preserve">
    <value>Supprimer les branches de plus de (jours)</value>
  </data>
  <data name="DeleteRemoteBranchesFromFlag" xml:space="preserve">
    <value>Supprimer les branches obsolètes du dépôt distant</value>
  </data>
  <data name="IncludeUnmergedBranchesFlag" xml:space="preserve">
    <value>Supprimer les branches non fusionnées</value>
  </data>
  <data name="MergedInBranch" xml:space="preserve">
    <value>Branche dans laquelle toutes les branches devraient être fusionnées</value>
  </data>
  <data name="RegexCaseInsensitiveFlag" xml:space="preserve">
    <value>Le filtre regex est-il insensible à la casse ?</value>
  </data>
  <data name="RegexFilter" xml:space="preserve">
    <value>Regex pour filtrer les branches à supprimer</value>
  </data>
  <data name="RegexInvertedFlag" xml:space="preserve">
    <value>Chercher les branches qui ne correspondent pas à la regex</value>
  </data>
  <data name="RemoteName" xml:space="preserve">
    <value>On doit effacer depuis les noms des branches obsolètes distantes</value>
  </data>
  <data name="UseRegexToFilterBranchesFlag" xml:space="preserve">
    <value>Utiliser une regex pour filtrer les branches à supprimer</value>
  </data>
  <data name="FormText" xml:space="preserve">
    <value>Supprimer les branches obsolètes</value>
  </data>
  <data name="Author" xml:space="preserve">
    <value>Dernier auteur</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Fermer</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Supprimer</value>
  </data>
  <data name="IncludeRemoteBranches" xml:space="preserve">
    <value>Supprimer les branches distantes du dépôt</value>
  </data>
  <data name="Message" xml:space="preserve">
    <value>Dernier message</value>
  </data>
  <data name="RefreshBtn" xml:space="preserve">
    <value>Rechercher les branches</value>
  </data>
  <data name="AreYouSureToDelete" xml:space="preserve">
    <value>Voulez-vous vraiment supprimer {0} les branches sélectionnées ?</value>
  </data>
  <data name="BranchesSelected" xml:space="preserve">
    <value>{0}/{1} branches sélectionnées.</value>
  </data>
  <data name="CancelText" xml:space="preserve">
    <value>Annuler</value>
  </data>
  <data name="ChooseBranchesToDeleteText" xml:space="preserve">
    <value>Sélectionnez les branches à supprimer. Seules les branches totalement fusionnées dans '{0}' seront supprimées.</value>
  </data>
  <data name="DangerousActionText" xml:space="preserve">
    <value>ACTION DANGEREUSE !
Les branches distantes seront supprimées '{0}'. On ne peut pas annuler.
Êtes-vous sûr de vouloir continuer ?</value>
  </data>
  <data name="DeleteCaption" xml:space="preserve">
    <value>Supprimer</value>
  </data>
  <data name="DeletingBranchesText" xml:space="preserve">
    <value>Suppression des branches ...</value>
  </data>
  <data name="DeletingUnmergedBranchesText" xml:space="preserve">
    <value>Supprimer des branches non fusionnées donnera des commits instables. A utiliser avec prudence !</value>
  </data>
  <data name="LoadingText" xml:space="preserve">
    <value>Chargement...</value>
  </data>
  <data name="PressToSearchText" xml:space="preserve">
    <value>Appuyez sur '{0}' pour rechercher des branches à supprimer.</value>
  </data>
  <data name="SearchBranchesText" xml:space="preserve">
    <value>Rechercher des branches</value>
  </data>
  <data name="SelectBranchesToDeleteText" xml:space="preserve">
    <value>Sélectionnez des branches à effacer en utilisant les boîtes à cocher dans la colonne '{0}'.</value>
  </data>
  <data name="ButtonSettingsText" xml:space="preserve">
    <value>Paramètres...</value>
  </data>
  <data name="DateDataGridViewTextBoxColumn" xml:space="preserve">
    <value>Dernière activité</value>
  </data>
  <data name="IncludeUnmergedBranchesText" xml:space="preserve">
    <value>Inclure les branches non fusionnées</value>
  </data>
  <data name="Label1Text" xml:space="preserve">
    <value>Supprimer les branches de plus de X jours</value>
  </data>
  <data name="Label2Text" xml:space="preserve">
    <value>Supprimer les branches totalement fusionnées dans la branche</value>
  </data>
  <data name="NameDataGridViewTextBoxColumn" xml:space="preserve">
    <value>Nom</value>
  </data>
  <data name="RegexDoesNotMatch" xml:space="preserve">
    <value>Celles ne correspondant pas</value>
  </data>
  <data name="RegexFilter" xml:space="preserve">
    <value>/(fonctionnalité|développement)/</value>
  </data>
  <data name="UseRegexCaseInsensitive" xml:space="preserve">
    <value>Ignorer la casse</value>
  </data>
  <data name="UseRegexFilter" xml:space="preserve">
    <value>Utiliser une regex pour filtrer les branches</value>
  </data>
</root>