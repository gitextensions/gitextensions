using System.Globalization;
using System.Resources;
using GitCommands;
using System.Text;

namespace GitUI.Properties
{
    /// <summary>
    /// DESIGNER USAGE INFO!
    ///
    /// This partial class helps to modify the Resources.resx using the designer AND having some custom
    /// code inside the designer generated Resources class.
    /// The only thing to do whenever the Designer is used is to add the partial class modifier in Resources.Designer.cs
    /// which is not generated by the designer code generator.
    ///
    /// As soon as the preprocessor if statements are no longer necessary this class can / should be removed.
    /// </summary>
    internal partial class Resources
    {
        static Resources()
        {
            var theme = AppSettings.IconTheme;
            if (theme != AppSettings.DefaultTheme)
            {
                resourceMan = new ThemeResourceManager(theme);
            }
        }

        private class ThemeResourceManager : System.Resources.ResourceManager
        {
            private static string BasePath = "GitUI.Properties.Resources";
            private static string ResFileExtension = "resources";
            private readonly System.Resources.ResourceManager resourceManager;
            private readonly string theme;

            public ThemeResourceManager(string theme)
                :base(BasePath, typeof(Resources).Assembly)
            {
                resourceManager = new global::System.Resources.ResourceManager(BasePath, typeof(Resources).Assembly);
                this.theme = theme;
            }

            protected override string GetResourceFileName(CultureInfo culture)
            {
                return string.Format("{0}.{1}.{2}", BasePath, theme, ResFileExtension);
            }

            public override object GetObject(string name, CultureInfo culture)
            {
                try
                {
                    return base.GetObject(name, culture) ?? resourceManager.GetObject(name, culture);
                }
                catch (System.Exception)
                {
                    return resourceManager.GetObject(name, culture);
                }
            }
        }

        public static System.Drawing.Bitmap loadingpanel
        {
            get
            {
                if(GitCommands.Utils.EnvUtils.IsMonoRuntime())
                    return loadingpanel_static;
                else
                    return loadingpanel_animated;

            }
        }
    }
}
