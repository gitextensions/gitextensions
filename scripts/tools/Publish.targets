<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>

  <UsingTask TaskName="_GetPluginAssembliesCodeTask" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <Solution ParameterType="System.String" Required="true"/>
      <IsContinuousIntegrationBuild ParameterType="System.String" Required="true"/>
      <Output ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true"/>
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml"/>
      <Reference Include="Microsoft.Build"/>
      <Using Namespace="Microsoft.Build.Construction"/>
      <Using Namespace="Microsoft.Build.Evaluation"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        var _solutionFile = SolutionFile.Parse(Solution); 
        Output = _solutionFile.ProjectsInOrder
            .Where(proj => proj.ProjectType == SolutionProjectType.KnownToBeMSBuildFormat)
            .SelectMany(proj => 
                        {
                            var project = new Project(proj.AbsolutePath);
                            project.SetGlobalProperty("ContinuousIntegrationBuild", IsContinuousIntegrationBuild);
                            project.ReevaluateIfNecessary();

                            return project.Items
                                .Where(item => item.ItemType == "PluginAssembly")
                                .Select(item => item.EvaluatedInclude);
                        })
            .Distinct()
            .OrderBy(pluginAssemblyPath => pluginAssemblyPath)
            .Select(pluginAssemblyPath => new TaskItem(pluginAssemblyPath))
            .ToArray();
      ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>
