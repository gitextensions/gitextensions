<Project>

  <!--
    ============================================================
                       _PublishTranslations

    Copies all available translations to the publish directory.
    ============================================================
    -->
  <Target Name="_PublishTranslations">
    <_GetAvailableTranslationsCodeTask
          TranslationFolder="$(TargetDir)Translation\">
      <Output ItemName="Translations" TaskParameter="Output"/>
    </_GetAvailableTranslationsCodeTask>

    <Copy SourceFiles="@(Translations)" DestinationFolder="$(PublishDir)Translation" ContinueOnError="false" />
  </Target>

  <!--
    ============================================================
                       _PublishExtraDependecies

    Copies additional files (e.g. EasyHook dlls) to the publish directory.
    ============================================================
    -->
  <Target Name="_PublishExtraDependecies">
    <Copy SourceFiles="$(SolutionDir)\Externals\EasyHook\EasyHookDll\Build\Release\x64\EasyHook64.dll" DestinationFolder="$(PublishDir)" />
    <Copy SourceFiles="$(SolutionDir)\Externals\EasyHook\EasyHookDll\Build\Release\x86\EasyHook32.dll" DestinationFolder="$(PublishDir)" />
  </Target>

  <!--
    ============================================================
                       _RetrieveCurrentBuildVersion

    Retrieves the current build version.
    ============================================================
    -->
  <Target Name="_RetrieveCurrentBuildVersion">
    <PropertyGroup>
      <ExeAssembly>$([MSBuild]::NormalizePath('$(PublishDir)', $(_DeploymentApplicationManifestIdentity)))</ExeAssembly>
    </PropertyGroup>

    <GetAssemblyIdentity AssemblyFiles="$(ExeAssembly)">
      <Output TaskParameter="Assemblies" ItemName="ExeAssemblyIdentities"/>
    </GetAssemblyIdentity>

    <PropertyGroup>
      <CurrentBuildVersion>%(ExeAssemblyIdentities.Version)</CurrentBuildVersion>
    </PropertyGroup>    
  </Target>

  <!--
    ============================================================
                       CreatePortable

    Creates a portable archive.
    ============================================================
    -->
  <!-- Any errors in targets that executed as 'AfterTargets' don't break the build: https://github.com/microsoft/msbuild/issues/3345
       A fix is going out in VS16.6p3, but it is way too long for us to wait.
    -->
  <Target Name="CreatePortable" BeforeTargets="Publish" DependsOnTargets="_RetrieveCurrentBuildVersion;_PublishTranslations;_PublishExtraDependecies">
    <PropertyGroup>
      <_AppPluginsPublishDir>$([MSBuild]::NormalizeDirectory('$(AppPublishDir)', 'Plugins'))</_AppPluginsPublishDir>

      <!-- Resolve app.config, so we can set/unset "portable" flag -->
      <_PublishAppConfig>$([System.IO.Path]::GetFileName('$(TargetAppConfig)'))</_PublishAppConfig>
      <_PublishAppConfigPath>$([System.IO.Path]::Combine('$(PublishDir)', '$(_PublishAppConfig)'))</_PublishAppConfigPath>

      <!-- Resolve the output file -->
      <_PublishPortableVersionSuffix>-$(CurrentBuildVersion.ToString())</_PublishPortableVersionSuffix>
      <_PublishPortableCommitHashSuffix Condition="'$(GitCommit)' != ''">-$(GitCommit)</_PublishPortableCommitHashSuffix>
      <_PublishPortableCommitHashSuffix Condition="'$(env:APPVEYOR_REPO_COMMIT)' != ''">-$(env:APPVEYOR_REPO_COMMIT)</_PublishPortableCommitHashSuffix>
      <_PublishPortableCommitHashSuffix Condition="'$(env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT)' != ''">-$(env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT)</_PublishPortableCommitHashSuffix>
      <_PublishPortableFileName>GitExtensions-Portable$(_PublishPortableVersionSuffix)$(_PublishPortableCommitHashSuffix).zip</_PublishPortableFileName>
      <_PublishPortablePath>$([MSBuild]::NormalizePath('$(ArtifactsPublishDir)', '$(_PublishPortableFileName)'))</_PublishPortablePath>

      <!-- We want to archive the whole publish folder, so get one level up -->
      <_PublishedPath>$([MSBuild]::NormalizeDirectory('$(PublishDir)', '..'))</_PublishedPath>
    </PropertyGroup>

    <!-- Determine plugins assemblies and their required references -->
    <_GetPluginAssembliesCodeTask
          SolutionPath="$(SolutionPath)"
          BuildConfiguration="$(Configuration)"
          IsContinuousIntegrationBuild="$(ContinuousIntegrationBuild)">
      <Output ItemName="CollectedPluginAssemblies" TaskParameter="Output"/>
    </_GetPluginAssembliesCodeTask>

    <ItemGroup>
      <!-- Collect plugin and their direct reference -->
      <PluginAssemblies Include="@(CollectedPluginAssemblies)" />
      <PluginAssemblies Remove="@(PluginAssemblies)" Condition="$([System.String]::Copy('%(Filename)').EndsWith('.resources'))" />

      <!-- Collect resources for plugins -->
      <PluginResourcesAssemblies Include="@(CollectedPluginAssemblies)" />
      <PluginResourcesAssemblies Remove="@(PluginResourcesAssemblies)" Condition="!$([System.String]::Copy('%(Filename)').EndsWith('.resources'))" />
      <!-- Resources must leave in own folders, so replace the base path with the plugins target folder -->
      <PluginResourcesAssemblies>
        <DestinationFiles>$([System.String]::Copy('%(Identity)').Replace('%(BasePath)', '$(_AppPluginsPublishDir)'))</DestinationFiles>
      </PluginResourcesAssemblies>
    </ItemGroup>

    <!-- Copy the plugins to the Plugins folder -->
    <Copy
            SourceFiles="@(PluginAssemblies)"
            DestinationFolder="$(_AppPluginsPublishDir)"
            ContinueOnError="ErrorAndStop"
          />
    <!-- Copy the plugins' resources to the Plugins folder -->
    <Copy
            SourceFiles="@(PluginResourcesAssemblies)"
            DestinationFiles="@(PluginResourcesAssemblies->'%(DestinationFiles)')"
            ContinueOnError="ErrorAndStop"
          />

    <!-- Mark the package as "portable" -->
    <XmlPoke XmlInputPath="$(_PublishAppConfigPath)"
            Query="configuration/applicationSettings/GitCommands.Properties.Settings/setting[@name='IsPortable']/value" 
            Value="True"
            ContinueOnError="ErrorAndStop"
          />

    <ZipDirectory
            SourceDirectory="$(_PublishedPath)"
            DestinationFile="$(_PublishPortablePath)"
            Overwrite="true"
            ContinueOnError="ErrorAndStop"
          />

    <!-- Reset the "portable" flag -->
    <XmlPoke XmlInputPath="$(_PublishAppConfigPath)"
            Query="configuration/applicationSettings/GitCommands.Properties.Settings/setting[@name='IsPortable']/value" 
            Value="False"
            ContinueOnError="ErrorAndStop"
          />
  </Target>

  <!--
    ============================================================
                       CreateMsi

    Creates an MSI.
    ============================================================
    -->
  <Target Name="CreateMsi" AfterTargets="CreatePortable">
    <PropertyGroup>
      <_PublishMsiVersionSuffix>-$(CurrentBuildVersion.ToString())</_PublishMsiVersionSuffix>
      <_PublishMsiCommitHashSuffix Condition="'$(GitCommit)' != ''">-$(GitCommit)</_PublishMsiCommitHashSuffix>
      <_PublishMsiCommitHashSuffix Condition="'$(env:APPVEYOR_REPO_COMMIT)' != ''">-$(env:APPVEYOR_REPO_COMMIT)</_PublishMsiCommitHashSuffix>
      <_PublishMsiCommitHashSuffix Condition="'$(env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT)' != ''">-$(env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT)</_PublishMsiCommitHashSuffix>
      <_PublishMsiFileName>GitExtensions$(_PublishPortableVersionSuffix)$(_PublishPortableCommitHashSuffix)</_PublishMsiFileName>
      <_PublishMsiPath>$([MSBuild]::NormalizePath('$(ArtifactsPublishDir)'))</_PublishMsiPath>
    </PropertyGroup>

    <MSBuild 
        Projects="$(ProjectDir)\..\Setup\Setup.wixproj"
        Targets="Build"
        Properties="Configuration=$(Configuration);Platform=x86;Version=$(CurrentBuildVersion);ArtifactsBinPath=$(ArtifactsBinDir);ArtifactsPublishPath=$(AppPublishDir);OutputPath=$(_PublishMsiPath.TrimEnd('\'));TargetName=$(_PublishMsiFileName)"
        StopOnFirstFailure="true"
        />
  </Target>

</Project>
