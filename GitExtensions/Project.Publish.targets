<Project>
  <Import Project="$(MSBuildProjectDirectory)\..\scripts\Publish.targets"/>

  <!--
    ============================================================
                       _PublishTranslations

    Copies all available translations to the publish directory.
    ============================================================
    -->
  <Target Name="_PublishTranslations">
    <_GetAvailableTranslationsCodeTask
          TranslationFolder="$(TargetDir)Translation\">
      <Output ItemName="Translations" TaskParameter="Output"/>
    </_GetAvailableTranslationsCodeTask>

    <Copy SourceFiles="@(Translations)" DestinationFolder="$(PublishDir)Translation" ContinueOnError="false" />
  </Target>

  <!--

    Disabled until we find a way to utilise it under .NET

    ============================================================
                       _PublishExtraDependecies

    Copies additional files (e.g. EasyHook dlls) to the publish directory.
    ============================================================
  <Target Name="_PublishExtraDependecies">
    <Copy SourceFiles="$(SolutionDir)\Externals\EasyHook\EasyHookDll\Build\Release\x64\EasyHook64.dll" DestinationFolder="$(PublishDir)" />
    <Copy SourceFiles="$(SolutionDir)\Externals\EasyHook\EasyHookDll\Build\Release\x86\EasyHook32.dll" DestinationFolder="$(PublishDir)" />
  </Target>
    -->

  <!--
    ============================================================
                       _RetrieveCurrentBuildVersion

    Retrieves the current build version.
    ============================================================
    -->
  <Target Name="_RetrieveCurrentBuildVersion">
    <PropertyGroup>
      <_ApplicationManifestIdentity2>$([System.String]::Copy('$(_DeploymentApplicationManifestIdentity)').Replace('.exe', '.dll'))</_ApplicationManifestIdentity2>
      <ExeAssembly>$([MSBuild]::NormalizePath('$(PublishDir)', $(_ApplicationManifestIdentity2)))</ExeAssembly>
    </PropertyGroup>

    <GetAssemblyIdentity AssemblyFiles="$(ExeAssembly)">
      <Output TaskParameter="Assemblies" ItemName="ExeAssemblyIdentities"/>
    </GetAssemblyIdentity>

    <PropertyGroup>
      <CurrentBuildVersion>%(ExeAssemblyIdentities.Version)</CurrentBuildVersion>
    </PropertyGroup>    
  </Target>

  <!--
    ============================================================
                       _DownloadPluginManager

    Download plugin manager.
    ============================================================
    -->
  <PropertyGroup>
    <_PluginManagerPath>$([MSBuild]::NormalizePath('$(ArtifactsPublishDir)', 'GitExtensions.PluginManager'))</_PluginManagerPath>
  </PropertyGroup>

  <Target Name="_DownloadPluginManager">
    <Exec 
      Condition="!Exists('$(_PluginManagerPath)')"
      Command="powershell.exe $(RepoRoot)\scripts\Download-PluginManager.ps1 -ExtractRootPath '$(_PluginManagerPath)'" />
  </Target>

  <!--
    ============================================================
                       _CleanupBeforePack

    Removes all files not eligible for packing.
    ============================================================
    -->
  <Target Name="_CleanupBeforePack">
    <PropertyGroup>
      <_AppPluginsPublishDir>$([MSBuild]::NormalizeDirectory('$(AppPublishDir)', 'Plugins'))</_AppPluginsPublishDir>
    </PropertyGroup>

    <ItemGroup>
      <UnnecessaryFiles Include="$(AppPublishDir)\*.pdb"/>
      <UnnecessaryFiles Include="$(AppPublishDir)\*.exe.config"/>
      <UnnecessaryFiles Include="$(AppPublishDir)\*.dll.config"/>
      <UnnecessaryFiles Include="$(AppPublishDir)\*.xml"/>
      <UnnecessaryFiles Include="$(AppPublishDir)\TranslationApp.*"/>
      <UnnecessaryFiles Include="$(AppPublishDir)\ApplicationInsights.config"/>
      <!-- Duplicates -->
      <UnnecessaryFiles Include="$(_AppPluginsPublishDir)\Newtonsoft.Json.dll"/>

      <!-- Keep this one -->
      <UnnecessaryFiles Remove="$(AppPublishDir)\GitExtensions.dll.*"/>
    </ItemGroup>

    <Delete Files="@(UnnecessaryFiles)" />

  </Target>

  <!--
    ============================================================
                       _PatchRuntimeConfigJson

    Retain only the reference to Microsoft.WindowsDesktop.App in the packaged *.runtimeconfig.json.
    See https://github.com/gitextensions/gitextensions/issues/10337 for more details.
    ============================================================
    -->
    <Target Name="_PatchRuntimeConfigJson" AfterTargets="Publish">
      <ItemGroup>
        <RuntimeConfigJsonFiles Include="$(AppPublishDir)\*.runtimeconfig.json"/>
      </ItemGroup>
  
      <Exec Command="powershell.exe $(RepoRoot)\scripts\Patch-RuntimeConfigJsonFiles.ps1 '@(RuntimeConfigJsonFiles)'" />
    </Target>

  <!--
    ============================================================
                       _EnsureBundleContent

    Copies all necessary files for the pack step.
    ============================================================
    -->
  <Target Name="_EnsureBundleContent">
    <PropertyGroup>
      <ContinuousIntegrationBuild Condition="'$(ContinuousIntegrationBuild)' == ''">false</ContinuousIntegrationBuild>

      <_UserDictionariesSourceDir>$([MSBuild]::NormalizeDirectory('$(RepoRoot)', 'Bin', 'Dictionaries'))</_UserDictionariesSourceDir>
      <_UserDictionariesPublishDir>$([MSBuild]::NormalizeDirectory('$(AppPublishDir)', 'Dictionaries'))</_UserDictionariesPublishDir>

      <_AppPluginsPublishDir>$([MSBuild]::NormalizeDirectory('$(AppPublishDir)', 'Plugins'))</_AppPluginsPublishDir>
      <_AppUserPluginsPublishDir>$([MSBuild]::NormalizeDirectory('$(AppPublishDir)', 'UserPlugins'))</_AppUserPluginsPublishDir>


      <_PluginManagerBinPath>$([MSBuild]::NormalizeDirectory('$(_PluginManagerPath)', 'Output'))</_PluginManagerBinPath>
      <_PluginManagerPublishDir>$([MSBuild]::NormalizeDirectory('$(_AppUserPluginsPublishDir)', 'GitExtensions.PluginManager'))</_PluginManagerPublishDir>
    </PropertyGroup>

    <!-- Determine plugins assemblies and their required references -->
    <_GetPluginAssembliesCodeTask
          SolutionPath="$(SolutionPath)"
          BuildConfiguration="$(Configuration)"
          IsContinuousIntegrationBuild="$(ContinuousIntegrationBuild)">
      <Output ItemName="CollectedPluginAssemblies" TaskParameter="Output"/>
    </_GetPluginAssembliesCodeTask>

    <ItemGroup>
      <UserDictionaries Include="$(_UserDictionariesSourceDir)\*.dic" />
    </ItemGroup>

    <ItemGroup>
      <!-- Collect plugin and their direct reference -->
      <PluginAssemblies Include="@(CollectedPluginAssemblies)" />
      <PluginAssemblies Remove="@(PluginAssemblies)" Condition="$([System.String]::Copy('%(Filename)').EndsWith('.resources'))" />

      <!-- Collect resources for plugins -->
      <PluginResourcesAssemblies Include="@(CollectedPluginAssemblies)" />
      <PluginResourcesAssemblies Remove="@(PluginResourcesAssemblies)" Condition="!$([System.String]::Copy('%(Filename)').EndsWith('.resources'))" />
      <!-- Resources must leave in own folders, so replace the base path with the plugins target folder -->
      <PluginResourcesAssemblies>
        <DestinationFiles>$([System.String]::Copy('%(Identity)').Replace('%(BasePath)', '$(_AppPluginsPublishDir)'))</DestinationFiles>
      </PluginResourcesAssemblies>
      <!-- Collect resources for UserPlugins -->
      <UserPluginResources Include="$(_PluginManagerBinPath)\**\*.*" />
    </ItemGroup>

    <!-- Copy the dictionaries to the Dictionaries folder -->
    <Copy
            SourceFiles="@(UserDictionaries)"
            DestinationFolder="$(_UserDictionariesPublishDir)"
            ContinueOnError="ErrorAndStop"
          />

    <ItemGroup>
      <NativeAssemblies Include="$([MSBuild]::NormalizePath('$(ArtifactsBinDir)', 'GitExtSshAskPass'))\*.dll" />
      <NativeAssemblies Include="$([MSBuild]::NormalizePath('$(ArtifactsBinDir)', 'GitExtensionsShellEx'))\*.dll" />
    </ItemGroup>

    <!-- Copy the native components -->
    <Copy
            SourceFiles="@(NativeAssemblies)"
            DestinationFolder="$(AppPublishDir)"
            ContinueOnError="ErrorAndStop"
          />

    <!-- Copy the plugins to the Plugins folder -->
    <Copy
            SourceFiles="@(PluginAssemblies)"
            DestinationFolder="$(_AppPluginsPublishDir)"
            ContinueOnError="ErrorAndStop"
          />
    <!-- Copy the plugins' resources to the Plugins folder -->
    <Copy
            SourceFiles="@(PluginResourcesAssemblies)"
            DestinationFiles="@(PluginResourcesAssemblies->'%(DestinationFiles)')"
            ContinueOnError="ErrorAndStop"
          />
    <!-- Copy the PluginManager to the UserPlugins folder -->
    <Copy
            SourceFiles="@(UserPluginResources)"
            DestinationFolder="$(_PluginManagerPublishDir)\%(RecursiveDir)"
            ContinueOnError="ErrorAndStop"
          />

  </Target>

  <!--
    ============================================================
                       _CheckBundlesConsistent

    Checks whether all files that are present in $(PublishDir) are delcared in Setup/Product.wxs.
    ============================================================
    -->
  <Target Name="_CheckBundlesConsistent" AfterTargets="Publish" DependsOnTargets="_PublishTranslations;_DownloadPluginManager;_EnsureBundleContent;_CleanupBeforePack">
    <Exec
        Command="powershell.exe .\Setup\Check-BundlesConsistent.ps1 '$(PublishDir)'"
        WorkingDirectory="$(RepoRoot)"
        EchoOff="true"
        ConsoleToMsBuild="true"
        StandardOutputImportance="High">
    </Exec>
  </Target>

  <!--
    ============================================================
                       CreatePortable

    Creates a portable archive.
    ============================================================
    -->
  <!-- Any errors in targets that executed as 'AfterTargets' don't break the build: https://github.com/microsoft/msbuild/issues/3345
       A fix is going out in VS16.6p3, but it is way too long for us to wait.
    -->
  <Target Name="CreatePortable"
          AfterTargets="Publish"
          DependsOnTargets="_RetrieveCurrentBuildVersion;_PatchRuntimeConfigJson;_CheckBundlesConsistent">
    <PropertyGroup>
      <_TargetAppConfig>@(AppConfigFileDestination)</_TargetAppConfig>

      <!-- Resolve app.config, so we can set/unset "portable" flag -->
      <_PublishAppConfig>$([System.IO.Path]::GetFileName('$(_TargetAppConfig)'))</_PublishAppConfig>
      <_PublishAppConfigPath>$([System.IO.Path]::Combine('$(PublishDir)', '$(_PublishAppConfig)'))</_PublishAppConfigPath>

      <!-- Resolve the output file -->
      <_PublishPortableVersionSuffix>-$(CurrentBuildVersion.ToString())</_PublishPortableVersionSuffix>

      <!-- This property comes from GitInfo package, but can be overriden on AppVeyor -->
      <_PublishPortableCommitHashSuffix Condition="'$(GitCommit)' != ''">-$(GitCommit)</_PublishPortableCommitHashSuffix>
      <_PublishPortableFileName>GitExtensions-Portable$(_PublishPortableVersionSuffix)$(_PublishPortableCommitHashSuffix).zip</_PublishPortableFileName>
      <_PublishPortablePath>$([MSBuild]::NormalizePath('$(ArtifactsPublishDir)', '$(_PublishPortableFileName)'))</_PublishPortablePath>

      <!-- We want to archive the whole publish folder, so get one level up -->
      <_PublishedPath>$([MSBuild]::NormalizeDirectory('$(PublishDir)'))</_PublishedPath>
    </PropertyGroup>

    <!-- Mark the package as "portable" -->
    <XmlPoke XmlInputPath="$(_PublishAppConfigPath)"
            Query="configuration/applicationSettings/GitCommands.Properties.Settings/setting[@name='IsPortable']/value" 
            Value="True"
            ContinueOnError="ErrorAndStop"
          />

    <ZipDirectory
            SourceDirectory="$(_PublishedPath)"
            DestinationFile="$(_PublishPortablePath)"
            Overwrite="true"
            ContinueOnError="ErrorAndStop"
          />

    <!-- Reset the "portable" flag -->
    <XmlPoke XmlInputPath="$(_PublishAppConfigPath)"
            Query="configuration/applicationSettings/GitCommands.Properties.Settings/setting[@name='IsPortable']/value" 
            Value="False"
            ContinueOnError="ErrorAndStop"
          />
  </Target>

  <!--
    ============================================================
                       CreateMsi

    Creates an MSI.
    ============================================================
    -->
  <Target Name="CreateMsi" Condition="'$(Arm64Build)' != 'true'" AfterTargets="CreatePortable">
    <PropertyGroup>
      <_AppVeyorSuffix>$(ARTIFACT_BUILD_SUFFIX)</_AppVeyorSuffix>
      <_PublishMsiVersionSuffix>-$(CurrentBuildVersion.ToString())$(_AppVeyorSuffix)</_PublishMsiVersionSuffix>
      <_PublishMsiCommitHashSuffix Condition="'$(GitCommit)' != ''">-$(GitCommit)</_PublishMsiCommitHashSuffix>
      <_PublishMsiCommitHashSuffix Condition="'$(env:APPVEYOR_REPO_COMMIT)' != ''">-$(env:APPVEYOR_REPO_COMMIT)</_PublishMsiCommitHashSuffix>
      <_PublishMsiCommitHashSuffix Condition="'$(env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT)' != ''">-$(env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT)</_PublishMsiCommitHashSuffix>
      <_PublishMsiFileName>GitExtensions$(_PublishMsiVersionSuffix)$(_PublishMsiCommitHashSuffix)</_PublishMsiFileName>
      <_PublishMsiPath>$([MSBuild]::NormalizePath('$(ArtifactsPublishDir)'))</_PublishMsiPath>
    </PropertyGroup>

    <!-- Determine WiX version from the referenced package -->
    <ItemGroup>
      <_WiX Include="@(PackageVersion)"  Condition="$([System.String]::Copy('%(Identity)')) == 'WiX'" />
    </ItemGroup>
    <Error Text="WiX package reference can't be found" Condition="'@(_WiX->Count())' != 1" />

    <PropertyGroup>
      <_WiXVersion>%(_WiX.Version)</_WiXVersion>
    </PropertyGroup>

    <!-- Work out VS installation path, so we can find MSBuild.exe -->
    <PropertyGroup>
      <VSWherePath>$([MSBuild]::NormalizePath('$(Pkgvswhere)', 'tools'))</VSWherePath>
    </PropertyGroup>

    <Exec
        Command="vswhere.exe -latest -prerelease -property installationPath -requires Microsoft.Component.MSBuild"
        WorkingDirectory="$(VSWherePath)"
        EchoOff="true"
        ConsoleToMsBuild="true"
        StandardOutputImportance="Low">
        <Output TaskParameter="ConsoleOutput" PropertyName="_VSInstallPath" />
    </Exec>

    <PropertyGroup>
      <_MSBuildCurrentPath>$([MSBuild]::NormalizePath('$(_VSInstallPath)', 'MSBuild', 'Current', 'Bin'))</_MSBuildCurrentPath>
      <_SetupArgs>/p:Configuration=$(Configuration);Platform=x86;WiXVersion=$(_WiXVersion);Version=$(CurrentBuildVersion);ArtifactsBinPath=$(ArtifactsBinDir);ArtifactsPublishPath=$(AppPublishDir);OutputPath=$(_PublishMsiPath.TrimEnd('\'));TargetName=$(_PublishMsiFileName)</_SetupArgs>
    </PropertyGroup>

    <!-- WiX isn't yet compatible with .NET. See: https://github.com/wixtoolset/issues/issues/5627 
         So can't use the normal tool chain (i.e. dotnet publish or MSBuild task) and must fall back
         to manually invoke msbuild.exe.

         When WiX becomes .NET compatible we may be able to invoke the following:

    <MSBuild 
        Projects="$(ProjectDir)\..\Setup\Setup.wixproj"
        Targets="Build"
        Properties="Configuration=$(Configuration);Platform=x86;WiXVersion=$(_WiXVersion);Version=$(CurrentBuildVersion);ArtifactsBinPath=$(ArtifactsBinDir);ArtifactsPublishPath=$(AppPublishDir);OutputPath=$(_PublishMsiPath.TrimEnd('\'));TargetName=$(_PublishMsiFileName)"
        StopOnFirstFailure="true"
        />
      -->
    <Exec
        Command="msbuild.exe $(ProjectDir)\..\Setup\Setup.wixproj /v:q /t:Build $(_SetupArgs) /bl:$(ArtifactsLogDir)\setup.binlog"
        WorkingDirectory="$(_MSBuildCurrentPath)"
        EchoOff="true"
        ConsoleToMsBuild="true"
        StandardOutputImportance="High">
    </Exec>
  </Target>

</Project>
